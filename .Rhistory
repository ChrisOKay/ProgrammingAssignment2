fMod = c(1.00,1.34,1.79,2.39,3.20,4.28,5.73,7.66,10.20,13.70,18.30,24.50,32.80,43.90,58.70,78.50,105.00,140.00,188.00,251.00)
contrast14uFast = c(66.90,66.80,66.70,66.50,66.20,66.00,65.60,65.10,64.40,63.50,62.30,60.70,58.60,55.70,52.00,47.50,42.50,37.30,32.20,27.50)
contrast14uSlow = c(66.80,66.70,66.50,66.30,66.00,65.60,65.20,64.50,63.70,62.50,60.90,58.90,56.10,52.60,48.10,43.20,38.00,32.90,28.10,23.60)
plot(fMod,contrast14uFast)
ls()
save(ls(),file.choose())
save(fMod,contrast14uFast, contrast14uSlow, file="contrast14um.rda")
browseURL("http://cran.stat.ucla.edu/web/packages/available_packages_by_name.html")
?update.packages
update.packages
update.packages()
?datasets
library(help = "datasets")
data "airmiles"
data(airmiles)
airmiles
data(anscombe)
anscombe
rm(list=ls())
?remove.packages
UCBAdmissions
plot(UCBAdmissions)
str(UCBAdmissions)
a <- available.packages()
head(rownames(a),3)
head(rownames(a),23)
install.packages("slidify")
install.packages("ggplot2")
sourcE("http://bioconductor.org/biocLite.R")
sourc("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GenomicFeatures","AnnotationDbi"))
library(ggplot2)
search()
install.packages("devtools")
install.packages("KernSmooth")
library(KernSmooth)
cls
clc
dir()
Sys.which("R")
head(trees)
swirl()
library(swirl)
swirl()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list )
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shpae_mat <-sapply(flag_shapes,range)
shape_mat <-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
swirl()
2
1
quit
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
mean(iris$Sepal.Length)
iris
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
?apply
library(datasets)
data(mtcars)
?mtcars
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug(ls)
ls(animate)
quit
exot
exit
q
q
Q
Q
getwd
q
q
q
q
Q
Q
Q
Q
Q
q
f
pi
Q
getwd
getwd()
ls
dir()
cd ..
cd('..')
getwd()
setdw('D:/dekarcch/')
setwd('D:/dekarcch/')
dir()
setwd('C:\Users\dekarcch\coursera\rprogramming\week3\ProgrammingAssignment2')
setwd('C:/Users/dekarcch/coursera/rprogramming/week3/ProgrammingAssignment2')
ls()
dir()
edit('cachematrix.R')
file.edit('cachematrix.R')
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
# The second function calculates the inverse of the a given matrix.
# However, it first checks to see if the inverse has already been calculated.
# If so, it gets the inverse from the cache and skips the computation.
# Otherwise, it calculates the inverse of the data
# and sets the value of the inverse in the cache via the setmean function.
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
cacheSolve(matrix(1:4,ncol=2,nrow=2))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1,2,3,4))
makeVector()
x <- makeVector
x
x$set
cachemean(x,c(1,2,3))
myVector <- makeVector(1:15)
